uniform mat4 m_BoneMatrices[150];
// #ifdef USE_HWSKINNING
// #define NUM_BONES 5
// #ifndef NUM_BONES
// #error A required pre-processor define "NUM_BONES" is not set!
// #endif

attribute vec4 inBoneWeight;
attribute vec4 inBoneIndices;
uniform sampler2D m_BoneParameter;

mat4 getBoneMatrix(in float index) {
  mat4 skinMat = mat4(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
  float f = 1.0/4.0;
  float x = 0.0;
  float y = index / 512.0;
//  skinMat = mat4(texture2D(m_BoneParameter,vec2(x+=f,y)),
//                    texture2D(m_BoneParameter,vec2(x+=f,y)),
//                    texture2D(m_BoneParameter,vec2(x+=f,y)),
//                    texture2D(m_BoneParameter,vec2(x+=f,y)));
//  skinMat = mat4(
//    vec4(0,0,0,0),
//    vec4(0,0,0,0),
//    vec4(0,0,0,0),
//    vec4(0,0,0,0)
//    );
//  skinMat = mat4(texture2D(m_BoneParameter,vec2(2,5)),
//                    texture2D(m_BoneParameter,vec2(2,5)),
//                    texture2D(m_BoneParameter,vec2(2,5)),
//                    texture2D(m_BoneParameter,vec2(2,5)));
    skinMat = m_BoneMatrices[0];
  return skinMat;
}

void Skinning_Compute(inout vec4 position, inout vec4 normal){
    vec4 index  = inBoneIndices;
    vec4 weight = inBoneWeight;

    vec4 newPos    = vec4(0.0);
    vec4 newNormal = vec4(0.0);

    for (float i = 0.0; i < 4.0; i += 1.0){
        mat4 skinMat = m_BoneMatrices[int(index.x)];
        //mat4 skinMat = getBoneMatrix(index.x);
        newPos    += weight.x * (skinMat * position);
        newNormal += weight.x * (skinMat * normal);
        index = index.yzwx;
        weight = weight.yzwx;
    }

    position = newPos;
    normal = newNormal;
}

// #else
// #error A required pre-processor define "NUM_BONES" is not set!
// void Skinning_Compute(inout vec4 position, inout vec4 normal){
//    // skinning disabled, leave position and normal unaltered
// }
// 
// #endif
